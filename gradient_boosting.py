# -*- coding: utf-8 -*-
"""Gradient Boosting.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X2L3UooBuRGwl-Xme6A57LHY-ziq-y6l

**1. Import Libraries**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.datasets import make_regression

"""**2. Create Dataset**"""

X,y = make_regression(n_samples=1000, n_features=10, random_state=0)

"""**3. Split the datasets**"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

"""**4. Create Gradient Boosting Classifier**"""

gb_regressor = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=0)

"""**5. Train the model**"""

gb_regressor.fit(X_train, y_train)

"""**6. Make Predictions**"""

y_pred = gb_regressor.predict(X_test)

"""**7. Evaluate performance**"""

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print("Mean Squared Error:", mse)
print("R-squared:", r2)

"""**8. Visualize**"""

import matplotlib.pyplot as plt
plt.scatter(y_test, y_pred)
plt.xlabel("Actual Values")
plt.ylabel("Predicted Values")
plt.title("Gradient Boosting Regression")
plt.show()
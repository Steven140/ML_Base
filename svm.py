# -*- coding: utf-8 -*-
"""SVM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1etus68NyDEPSJxFQpX9bEfWE_MWSAevr

**1. Import Libraries**
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn import svm
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

"""**2. Create a dataset**"""

np.random.seed(42)
X = np.random.rand(50,2)
y = (X[:,0] + X[:,1] >1).astype(int)

"""**3. Split the dataset into training and testing**"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state = 42)

"""**4. Inititalize the SVM Classifier**"""

clf = svm.SVC(kernel = 'linear')

"""**5. Train the Model**"""

clf.fit(X_train,y_train)

"""**6. Make Predictions**"""

y_pred = clf.predict(X_test)

"""**7. Calculate Accuracy**"""

accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy : {accuracy * 100: .2f}%")

"""**8. Visualize**"""

x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.02),
                     np.arange(y_min, y_max, 0.02))

# Plot the decision boundary by assigning a color to each point in the mesh
Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)

plt.contourf(xx, yy, Z, alpha=0.8)

# Also plot the training points
plt.scatter(X_train[:, 0], X_train[:, 1], c=y_train, edgecolors='k', marker='o')
plt.scatter(X_test[:, 0], X_test[:, 1], c=y_test, edgecolors='k', marker='x')

plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.title('SVM Decision Boundary')

plt.show()